#pragma checksum "C:\Users\nastya\source\repos\Map - копия\Map\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "d8cc00d9156d0e7a53cfd018c230659c7decb30c"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Index.cshtml", typeof(AspNetCore.Views_Home_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\nastya\source\repos\Map - копия\Map\Views\_ViewImports.cshtml"
using Map;

#line default
#line hidden
#line 2 "C:\Users\nastya\source\repos\Map - копия\Map\Views\_ViewImports.cshtml"
using Map.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d8cc00d9156d0e7a53cfd018c230659c7decb30c", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3191a14d3a44953a88a2e8df7a8abe3511324e75", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/infobubble.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/infobubble-compiled.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/markerclusterer.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "C:\Users\nastya\source\repos\Map - копия\Map\Views\Home\Index.cshtml"
  
    ViewBag.Title = "Home Page";

#line default
#line hidden
            BeginContext(41, 148, true);
            WriteLiteral("\r\n<script src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBYDJvBdTt6k49Fdsl2YXrP5QDcbyl9NRM&libraries=places,visualization\" defer></script>\r\n");
            EndContext();
            BeginContext(189, 48, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6a3cfbcf5f504a69bf30566629531220", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(237, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(239, 57, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "459028b4671e4fc6913c88fb6060386b", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(296, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(298, 53, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7e6109c0abb0451893943334350b2d9d", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(351, 64, true);
            WriteLiteral("\r\n\r\n<div id=\"map\" style=\"height: 600px; width:600px;\"></div>\r\n\r\n");
            EndContext();
            DefineSection("scripts", async() => {
                BeginContext(433, 355, true);
                WriteLiteral(@"
    <script type=""text/javascript"">

        var markers = new Array(5);
        var infowindow;
        var map;
        var infowindow;
        var service;
        var directionsService;
        var directionsDisplay;
        var choisen;
        var pos;
        var keyword;
        var type;
        var infobubble;

        fetch('");
                EndContext();
                BeginContext(789, 29, false);
#line 28 "C:\Users\nastya\source\repos\Map - копия\Map\Views\Home\Index.cshtml"
          Write(Url.Action("GetData", "Home"));

#line default
#line hidden
                EndContext();
                BeginContext(818, 13477, true);
                WriteLiteral(@"')
            .then(function (response)
            {
                if (response.status !== 200)
                {
                    console.log(
                        'Looks like there was a problem. Status Code: ' + response.status
                    );
                    return;
                }
                response.json().then(function (data)
                {
                    markers = data;
                    console.log(markers);
                    initMap();

                });
            })
            .catch(function (err) {
                console.log('Fetch Error :-S', err);
            });

        function initMap()
        {
            
          var pyrmont = { lat: 50.45136068, lng: 30.48783713 };

            map = new google.maps.Map(document.getElementById('map'), {
            center: pyrmont,
            zoom: 4,
            mapTypeId: 'roadmap',
            styles: [
            {
                ""featureType"": ""all"",
             ");
                WriteLiteral(@"   ""elementType"": ""all"",
                ""stylers"": [
                    {
                        ""hue"": ""#008eff""
                    }
                ]
            },
            {
                ""featureType"": ""poi"",
                ""elementType"": ""all"",
                ""stylers"": [
                    {
                        ""visibility"": ""off""
                    }
                ]
            },
            {
                ""featureType"": ""road"",
                ""elementType"": ""all"",
                ""stylers"": [
                    {
                        ""saturation"": ""0""
                    },
                    {
                        ""lightness"": ""0""
                    }
                ]
            },
            {
                ""featureType"": ""transit"",
                ""elementType"": ""all"",
                ""stylers"": [
                    {
                        ""visibility"": ""off""
                    }
                ]
            },
      ");
                WriteLiteral(@"      {
                ""featureType"": ""water"",
                ""elementType"": ""all"",
                ""stylers"": [
                    {
                        ""visibility"": ""simplified""
                    },
                    {
                        ""saturation"": ""-60""
                    },
                    {
                        ""lightness"": ""-20""
                    }
                ]
            }
        ]
          });


          var iconBase = 'https://maps.google.com/mapfiles/kml/shapes/';

            var icons =
            {
                1:
                {
                    icon: 'https://goodzone.international/map/mmm2.png', //orange
                },

                2:
                {
                    icon: 'https://goodzone.international/map/mmm3.png', //red
                },

                3:
                {
                    icon: 'https://goodzone.international/images/m1.png', //pink
                },

                ");
                WriteLiteral(@"0:
                {
                    icon: 'https://goodzone.international/map/mmm1.png', // white
                },
            };

          //console.log(markers);

          infowindow = new google.maps.InfoWindow();
          service = new google.maps.places.PlacesService(map);
          var locations = new Array(5);

            for (let i = 0; i < markers.length; i++)
                markers[i].position = new google.maps.LatLng(markers[i].lat, markers[i].lng);

          let arr = new Array(5);
          let i = 0;

          // Create markers.
          markers.forEach(function(mark) {
             var marker = new google.maps.Marker({
                  position: mark.position,
                  icon: icons[3].icon,
                  map: map,
                  name:mark.name,
                  place_id: mark.place_id,
                  address: mark.address,
                  rating: mark.rating,
                  site: mark.site,
                  state: mark.state,");
                WriteLiteral(@"
                  type: mark.type,
                  city: mark.city,
                  street: mark.street
            });
            arr[i++] = marker;

            let  bpnq=""https://monamo.ru/wp-content/uploads/2017/03/strelochka1.png"";

              marker.addListener('click', function ()
              {
                 marker.setIcon(icons[mark.state].icon);

                 if (marker.state != 2 || marker.site == """")
                     var site = """";
                 else
                     var site = '<br>Site:  <a href=""' + marker.site + '"" > ' + marker.site + '  </a>';

                 if (marker.state == 0)
                 {
                     var s = ""НОВОЕ МЕСТО""  //""<br> Rating: &#128077   "";
                     var inf0 = new InfoBubble(
                         {
                             maxWidth: 300,
                             content: '<div class=""c0""> <a href=' + marker.site + ' target=""_blank""> <div class=""cont_1"">' + marker.type.toUpperCase() +");
                WriteLiteral(@" "" -- "" + marker.name.toUpperCase() + ' <br><strong> ' + marker.street + ""  "" + marker.city + '</strong> <br><strong> ' + s + '</strong></div></a></div> ',
                             backgroundColor: 'rgb(250, 250, 250)',
                         });

                     inf0.close();
     	             inf0.open(map, marker);
                 }
                 else if (marker.state==1 )
                 {
                    var s =""ПРОВЕРЕНО "" // ""<br> Rating: &#128078   "";
                    var inf1 = new InfoBubble(
                        {
                          maxWidth: 300,
                          content: '<div class=""c1""> <a href='+marker.site +' target=""_blank""> <div class=""cont_1"">'+marker.type.toUpperCase()+"" -- ""+ marker.name.toUpperCase()  +' <br><strong> '+marker.street+""  "" + marker.city+'</strong> <br><strong> '+s+'</strong></div></a></div> ' ,
                          backgroundColor: 'rgb(249, 117, 0)'
                         });

        		    inf1.open(map,");
                WriteLiteral(@" marker);
                 }
                 else if (marker.state==2)
                 {
                    var s=""КЛЕВОЕ МЕСТО ""
                    var inf2 = new InfoBubble(
                        {
                          maxWidth: 300,
                          content: '<div class=""c2""> <a href='+marker.site +' target=""_blank""> <div class=""cont_1"">'+marker.type.toUpperCase()+"" -- ""+ marker.name.toUpperCase()  +' <br><strong> '+marker.street+""  "" + marker.city+'</strong> <br><strong> '+s+'</strong></div></a></div> ' ,
                          backgroundColor: 'rgb(141,0, 0)'
                         });

        		    inf2.open(map, marker);
                  }
              });
          });

          // Add a marker clusterer.
          var markerCluster = new MarkerClusterer(map, arr, {
            imagePath:
              '~/images/m', 
          });
            
            // Geolocation.
            if (navigator.geolocation)
            {
            
          ");
                WriteLiteral(@"      navigator.geolocation.getCurrentPosition(
                    function (position) {
                        pos = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude,
                        };

                        var myMarker = new google.maps.Marker({
                            position: pos,
                            map: map,
                            //draggable: true,
                            animation: google.maps.Animation.BOUNCE,
                        });

                        infowindow.setPosition(pos);
                        infowindow.setContent('Location found.');
                        map.setCenter(pos);
                    },
                    function () {
                        handleLocationError(true, infoWindow, map.getCenter());
                    });
            }
            else  // Browser doesn't support Geolocation
            {
                handleLocationEr");
                WriteLiteral(@"ror(false, infoWindow, map.getCenter());

            }
      
          // autocomplete
          var infowindow2 = new google.maps.InfoWindow();

          var marker = new google.maps.Marker({
            map: map,
            anchorPoint: new google.maps.Point(0, -29),
          });


          var autocomplete = new google.maps.places.Autocomplete(input);
            autocomplete.bindTo('bounds', map);
        //???
          var marker = new google.maps.Marker({  //???????????????????????????
            map: map,
            anchorPoint: new google.maps.Point(0, -29),
            });

            autocomplete.addListener('place_changed', function ()
            {
              infowindow2.close();
              marker.setVisible(false);
              var place = autocomplete.getPlace();
              currentPlace.lat= place.geometry.location.lat();
              currentPlace.lng= place.geometry.location.lng();
              currentPlace.place_id= place.place_id;
           ");
                WriteLiteral(@"   currentPlace.name= place.name;
              currentPlace.address = place.formatted_address;
              currentPlace.site=place.website;
              currentPlace.type = "" "";
              currentPlace.state= ""0"";
              currentPlace.street = """";
              currentPlace.country = "" "";
              currentPlace.city="""";

                var i = 0;
                while(i<place.address_components.length )
                {
                    //console.log(place.address_components[i]);
                    if(place.address_components[i].types.indexOf(""country"")!=-1)
                       currentPlace.country =place.address_components[i].short_name;

                    if((place.address_components[i].types.indexOf(""route"")!=-1)||(place.address_components[i].types.indexOf(""street_number"")!=-1))
                       currentPlace.street +=place.address_components[i].short_name +"" "";

                    if(place.address_components[i].types.indexOf(""locality"")!=-1)
          ");
                WriteLiteral(@"            currentPlace.city =place.address_components[i].short_name;

                   i++;
                }

                i = 0;

                //console.log(currentPlace.country );
                //console.log(currentPlace.city );
                //console.log(currentPlace.street );

                //street_address
                if (!place.geometry)
                {
                    window.alert(""No details available for input: '"" + place.name + ""'"");
                    return;
                }

                if (place.geometry.viewport)
                {
                    map.fitBounds(place.geometry.viewport);
                }
                else
                {
                    map.setCenter(place.geometry.location);
                    map.setZoom(17);
                }

                marker.setIcon(
                    ({
                        url: place.icon,
                        size: new google.maps.Size(71, 71),
                 ");
                WriteLiteral(@"       origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(17, 34),
                        scaledSize: new google.maps.Size(35, 35),
                    })
                 );
                    marker.setPosition(place.geometry.location);
                    marker.setVisible(true);

                    var address = '';
                    if (place.address_components) {
                      address = [
                        (place.address_components[0] &&
                         place.address_components[0].short_name) ||
                         '',
                        (place.address_components[1] &&
                         place.address_components[1].short_name) ||
                         '',
                        (place.address_components[2] &&
                         place.address_components[2].short_name) ||
                         '',
                      ].join(' ');
                    }
                   infowindow2.setC");
                WriteLiteral(@"ontent(
                      '<div><strong>'+ place.name + '</strong><br>'+ address );
                    infowindow2.open(map, marker);
            });

            console.log(""Before"");
             
            // Find Btn
             const addBtn =document.getElementById(""add"");
             addBtn.addEventListener('click',send );

                // send to
            function send()
            {
                if (currentPlace==undefined)
                    alert('Место не выбрано');
                else
                {
                    var message = JSON.stringify(currentPlace);
                    window.location.href = 'https://goodzone.international/map/addMarker.php?message='+message;
                }
            }

        } //initMap end

        function handleLocationError(browserHasGeolocation, infoWindow, pos)
        {
            infoWindow.setPosition(pos);
            infoWindow.setContent(
                browserHasGeolocation
                 ");
                WriteLiteral("   ? \'Error: The Geolocation service failed.\'\r\n                    : \"Error: Your browser doesn\'t support geolocation.\"\r\n            );\r\n        }\r\n\r\n    </script>\r\n");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
